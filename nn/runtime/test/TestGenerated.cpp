/*
 * Copyright (C) 2017 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top level driver for models and examples generated by test_generator.py

#include "NeuralNetworksWrapper.h"
#include "TestHarness.h"

#include <gtest/gtest.h>
#include <cassert>
#include <cmath>
#include <iostream>
#include <map>

namespace generated_tests {
using namespace android::nn::wrapper;

template <typename T>
class Example {
   public:
    // Test driver for those generated from ml/nn/runtime/test/spec
    static void Execute(std::function<void(Model*)> create_model,
                        std::function<bool(int)> is_ignored,
                        std::vector<MixedTypedExampleType>& examples) {
        Model model;
        create_model(&model);
        model.finish();

        int example_no = 1;
        for (auto& example : examples) {
            SCOPED_TRACE(example_no++);
            MixedTyped inputs = example.first;
            const MixedTyped& golden = example.second;

            Compilation compilation(&model);
            compilation.finish();
            Execution execution(&compilation);

            // Set all inputs
            for_all(inputs, [&execution](int idx, const void* p, size_t s) {
                ASSERT_EQ(Result::NO_ERROR, execution.setInput(idx, p, s));
            });

            MixedTyped test;
            // Go through all typed outputs
            resize_accordingly(golden, test);
            for_all(test, [&execution](int idx, void* p, size_t s) {
                ASSERT_EQ(Result::NO_ERROR, execution.setOutput(idx, p, s));
            });

            Result r = execution.compute();
            ASSERT_EQ(Result::NO_ERROR, r);
            // Filter out don't cares
            MixedTyped filtered_golden = filter(golden, is_ignored);
            MixedTyped filtered_test = filter(test, is_ignored);
            // We want "close-enough" results for float
            compare(filtered_golden, filtered_test);
        }
    }
};
};  // namespace generated_tests

using namespace android::nn::wrapper;
// Mixed-typed examples
typedef generated_tests::MixedTypedExampleType MixedTypedExample;

void Execute(std::function<void(Model*)> create_model,
             std::function<bool(int)> is_ignored,
             std::vector<MixedTypedExample>& examples) {
    generated_tests::Example<float>::Execute(create_model, is_ignored,
                                             examples);
}

class GeneratedTests : public ::testing::Test {
   protected:
    virtual void SetUp() {}
};

// Testcases generated from runtime/test/specs/*.mod.py
#include "generated/all_generated_tests.cpp"
// End of testcases generated from runtime/test/specs/*.mod.py

